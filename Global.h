#ifndef __INFRA_GLOBAL_H__
#define __INFRA_GLOBAL_H__

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>

#include <iostream>

// the configuration header file generated by autoconf
#include <config.h>

#include <Debugging.h>

// a macro that determine which is the minimal
#define minimal(x,y) ((x) < (y) ? (x) : (y))

/*
 * System specific definitions
 */

// memory barrier functions, used for lock free algorithm
// this barrier is for preventing compiler from reordering
// instructions, this do not prevent reordering of CPU
#if defined(__linux__)
	// if it's linux
#	define barrier() 	__asm__ __volatile__("": : :"memory")
#	define mb()		barrier()
#	define rmb()		barrier()
#	define wmb()		barrier()
#elif defined(__MACH__)
	// if it's mac
#	include <libkern/OSAtomic.h>
#	define mb()		OSMemoryBarrier()
#	define rmb()		OSMemoryBarrier()
#	define wmb()		OSMemoryBarrier()
#endif


/*
 * Definition of Types and return values
 * Avoid of magical numbers
 */

// definition of return type globaly
#define ReturnValue	int32_t
#define RET_GOOD	0
#define	RET_FAIL	-1

// definition of task
#define TaskId		uint32_t

//
#define __FUNC_NAME__	__PRETTY_FUNCTION__

#define max(a,b) ({ 		\
__typeof__ (a) _a = (a);	\
__typeof__ (b) _b = (b);	\
_a > _b ? _a : _b; })

#define min(a, b) ({		\
__typeof__ (a) _a = (a);	\
__typeof__ (b) _b = (b);	\
_a < _b ? _a : _b; })

#endif /*  __INFRA_GLOBAL_H__ */
